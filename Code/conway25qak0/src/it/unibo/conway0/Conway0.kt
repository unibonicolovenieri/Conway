/* Generated by AN DISI Unibo */ 
package it.unibo.conway0

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Conway0 ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val life = conwayMqtt.Life(20,20)
		  
			val outdev   = main.java.conway.devices.OutInMqttForActor( myself  )	
			val helper   =  main.java.conway.LifeUsageHelper( life, outdev )
			var running  = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | starts")
						 			 
									 helper.swithCellState(1,1)
						 			 helper.swithCellState(1,2)
						 			 helper.swithCellState(1,3)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStartGame",cond=whenDispatch("startGame"))
					transition(edgeName="t01",targetState="handleStopGame",cond=whenDispatch("stopGame"))
					transition(edgeName="t02",targetState="handleClearGame",cond=whenDispatch("clearGame"))
					transition(edgeName="t03",targetState="handleExit",cond=whenDispatch("exitGame"))
				}	 
				state("handleStartGame") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | starts the game")
						 
								   val goon = helper.fireEpoch()  //goon false se empty o stable
						if(  !goon  
						 ){forward("stopGame", "stopGame(play)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handleStartGame", 
				 	 					  scope, context!!, "local_tout_"+name+"_handleStartGame", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t04",targetState="handleStartGame",cond=whenTimeout("local_tout_"+name+"_handleStartGame"))   
					transition(edgeName="t05",targetState="handleStopGame",cond=whenDispatch("stopGame"))
				}	 
				state("handleStopGame") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | stop the game")
						 running = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleClearGame") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | clear the game")
						 helper.resetAndDisplayGrids() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleExit") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | EXIT from the game")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
