/* Generated by AN DISI Unibo */ 
package it.unibo.ms0

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Ms0 ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var Sendertopic=""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | waiting for msgs ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleReq0",cond=whenRequest("req0"))
				}	 
				state("handleReq0") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 val Sender = currentMsg.msgSender()  
						CommUtils.outcyan("$name | received request from $Sender ")
						if( checkMsgContent( Term.createTerm("req0(ARG)"), Term.createTerm("req0(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Sendertopic = payloadArg(0)  
								CommUtils.outblue("$name | request Sendertopic=$Sendertopic")
								answer("req0", "req0reply", "req0reply(answerTo($Sendertopic))"   )  
						}
						CommUtils.outmagenta("$name | update resource ---  ")
						updateResourceRep( "$name | handleReq0 done"  
						)
						delay(1000) 
						updateResourceRep( "$name | BYE"  
						)
						CommUtils.outblack("$name | publish on  Sendertopic=$Sendertopic ms0info ---  ")
						if(  mqttConnected  
						 ){//val m = MsgUtil.buildEvent(name, "ms0info", "ms0info(info(1))" ) 
						publish(MsgUtil.buildEvent(name,"ms0info","ms0info(info(1))").toString(), "$Sendertopic" )   
						}
						CommUtils.outblack("$name | emit event ms0info ---  ")
						emit("ms0info", "ms0info(alarm)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
